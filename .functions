#!/bin/bash

# Make a local git repo and link it to a new GitHub repo
function mkgit () {
    # Check if folder exists already
    if test -d "$1"; then
        echo "Echo: folder already exists."
        return 1
    fi

    # Make sure this is running in the Documents folder
    if ! [[ "$(pwd)" =~ ~/Documents.*$ ]]; then
        echo "Error: please navigate to the documents folder before running this script."
        return 1
    fi

    # Make sure arguments were passed
    if [ "$#" -ne 2 ]; then
        echo "Error: this script requires two arguments."
        return 1
    fi

    # Create a local directory
    mkdir "$1"
    cd "$1" || return

    # Add README, gitignore, and .vscode
    echo "# Hello world!" > README.md
    echo ".vscode/" > .gitignore
    mkdir ".vscode"
    ( cd ".vscode" || return
    touch settings.json )

    # Initialize local git repo
    git init -b main
    git add .
    git commit -m "Initial commit"

    # Link local repo to GitHub
    gh repo create --source=. --"$2" --remote=upstream --push
}

# Create a new python3 virtual environment
function mkvenv() {
	python3 -m venv venv
	source venv/bin/activate
}

# Run stable diffusion locally
function generate() {
	# Navigate to stable-diffusion repo
	cd ~/Documents/projects/ml/stable-diffusion
	source venv/bin/activate

	python scripts/txt2img.py --prompt "'$*'" --n_samples 1 --n_iter 1 --plms --precision full

	# Open the latest image
	cd outputs/txt2img-samples
	open $(ls -p | grep -v / | tail -1)
}

# Refresh dotfiles repo in Documents/projects/dotfiles
function refresh_dots() {
	# Go to root
	cd ~

	# Refresh Brewfile
	rm Brewfile
	HOMEBREW_NO_AUTO_UPDATE=1 brew bundle dump

	# Copy main dotfiles
	cp .bash_prompt .bash_profile .bashrc .aliases .exports .functions .gitconfig .gitignore_global .git-completion.bash .hushlogin .inputrc .vimrc Brewfile Documents/projects/dotfiles

	# VSCode
	cp ~/Library/Application\ Support/Code/User/{settings.json,keybindings.json} Documents/projects/dotfiles/vscode
	cp -R ~/Library/Application\ Support/Code/User/snippets Documents/projects/dotfiles/vscode

	# Go to dotfiles folder
	cd ~/Documents/projects/dotfiles
}

# Download any new research papers
function get_papers() {
	# Go to paper-dl directory
	cd ~/Documents/literature/paper-dl

	# Download papers
	source venv/bin/activate
	python3 main.py
	cd papers
}

# Make a new function that converts pdfs to text when you cat them
function catpdf() {
	# Check if the first argument is a PDF file
	if ! [[ "$1" == *.pdf ]]; then
 		echo "Error: you must pass in a PDF file."
	fi

	pdftotext "$1"
	cat "${1/.pdf/.txt}"
	rm "${1/.pdf/.txt}"
}

# Refresh a Markdown file on a timer
function rendermd() {
	# Check if the input file has a .md extension
	if [[ "$1" != *.md ]]; then
		echo "Error: input file must have a .md extension."
		return 1
	fi

	# Keep calling the glow command to rerender the file until user is done
	while true; do
		clear && printf '\e[3J' # clear scrollback buffer
		sed 's/->/\&rarr;/g' "$1" > _rendering.md # add fancy arrows for rendering
		glow "_rendering.md"
		sleep 5
	done
	rm _rendering.md
}
